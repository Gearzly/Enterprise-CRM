[
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "241d1fb8-dd8a-475c-9828-7438e137bcd5",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC001-test_list_all_leads_endpoint",
    "description": "Verify that the GET /sales/leads endpoint returns a list of all leads with a 200 status code and correct data structure.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_list_all_leads_endpoint():\n    url = f\"{BASE_URL}/sales/leads\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed with exception: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        leads = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate that the response is a list (of leads)\n    assert isinstance(leads, list), f\"Expected response to be a list, got {type(leads)}\"\n\n    # If leads list is not empty, validate essential structure of each lead item\n    if leads:\n        lead = leads[0]\n        # Common expected fields in a lead (guessing typical CRM lead fields)\n        expected_fields = {\"id\", \"name\", \"email\", \"phone\", \"status\", \"created_at\"}\n        assert isinstance(lead, dict), f\"Expected lead to be a dict, got {type(lead)}\"\n        missing_fields = expected_fields - lead.keys()\n        # It's possible that some fields may be optional, so check only common fields that likely exist\n        assert not missing_fields, f\"Lead object missing expected fields: {missing_fields}\"\n\ntest_list_all_leads_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 13, in test_list_all_leads_endpoint\n  File \"/var/task/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 37, in <module>\n  File \"<string>\", line 15, in test_list_all_leads_endpoint\nAssertionError: Request to http://localhost:8000/sales/leads failed with exception: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.274Z",
    "modified": "2025-09-23T20:35:43.059Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "55cee328-7569-47ef-b49a-69d0673dc991",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC002-test_create_new_lead_endpoint",
    "description": "Verify that the POST /sales/leads endpoint successfully creates a new lead and returns a 201 status code with confirmation.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8000\"\nLEADS_ENDPOINT = f\"{BASE_URL}/sales/leads\"\nTIMEOUT = 30\nHEADERS = {'Content-Type': 'application/json'}\n\ndef test_create_new_lead_endpoint():\n    # Construct a sample new lead payload\n    new_lead_payload = {\n        \"name\": f\"Test Lead {uuid.uuid4()}\",\n        \"email\": f\"testlead{uuid.uuid4().hex[:8]}@example.com\",\n        \"phone\": \"+1234567890\",\n        \"company\": \"Test Company\",\n        \"source\": \"UnitTest\",\n        \"status\": \"New\",\n        \"notes\": \"Lead created during automated testing\"\n    }\n    lead_id = None\n\n    try:\n        # Create a new lead\n        response = requests.post(\n            LEADS_ENDPOINT,\n            json=new_lead_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n\n        # Assert the response status code is 201 Created\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n\n        # Assert response content is JSON and contains confirmation (assuming returns lead id or similar)\n        json_response = response.json()\n        assert isinstance(json_response, dict), \"Response is not a JSON object\"\n\n        # Assuming the created lead has an 'id' field in response\n        assert 'id' in json_response, \"Response JSON does not contain lead 'id'\"\n\n        lead_id = json_response[\"id\"]\n        assert lead_id is not None, \"Lead id is None\"\n\n        # Additional possible confirmation checks\n        # Optionally verify returned lead info matches sent payload (besides id)\n        for key in ['name', 'email', 'phone', 'company', 'source', 'status', 'notes']:\n            if key in json_response:\n                assert json_response[key] == new_lead_payload[key], f\"Mismatch in lead field '{key}'\"\n\n    finally:\n        # Cleanup: Delete the created lead if lead_id is available\n        if lead_id:\n            delete_url = f\"{LEADS_ENDPOINT}/{lead_id}\"\n            try:\n                del_response = requests.delete(delete_url, timeout=TIMEOUT)\n                # Accept 204 No Content or 200 OK as success for deletion\n                assert del_response.status_code in [200, 204], f\"Failed to delete lead with id {lead_id}, status code: {del_response.status_code}\"\n            except Exception as e:\n                # Log or raise if deletion fails\n                raise RuntimeError(f\"Error during cleanup deleting lead with id {lead_id}: {str(e)}\") from e\n\ntest_create_new_lead_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 62, in <module>\n  File \"<string>\", line 24, in test_create_new_lead_endpoint\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.282Z",
    "modified": "2025-09-23T20:35:12.992Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "03b139dc-a048-460e-9783-a81c0f0921e6",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC003-test_list_all_campaigns_endpoint",
    "description": "Verify that the GET /marketing/campaigns endpoint returns a list of all marketing campaigns with a 200 status code and correct data structure.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_list_all_campaigns_endpoint():\n    url = f\"{BASE_URL}/marketing/campaigns\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    # Validate status code\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    # Validate content type header\n    content_type = response.headers.get(\"Content-Type\", \"\")\n    assert \"application/json\" in content_type, f\"Unexpected content type: {content_type}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate data structure: expected a list (array) of campaigns\n    assert isinstance(data, list), f\"Expected response data to be a list but got {type(data)}\"\n\n    # If there are campaigns returned, validate structure of first item (optional deeper check)\n    if data:\n        campaign = data[0]\n        assert isinstance(campaign, dict), \"Each campaign should be a dict\"\n        # Basic fields that a campaign might have based on marketing context\n        # Since schema details not fully provided, checking common fields presence\n        expected_fields = [\"id\", \"name\", \"status\"]\n        for field in expected_fields:\n            assert field in campaign, f\"Campaign missing expected field: {field}\"\n\ntest_list_all_campaigns_endpoint()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_list_all_campaigns_endpoint\n  File \"/var/task/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 41, in <module>\n  File \"<string>\", line 14, in test_list_all_campaigns_endpoint\nAssertionError: Request to http://localhost:8000/marketing/campaigns failed: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.287Z",
    "modified": "2025-09-23T20:39:43.367Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "cc3d5416-d09c-48b1-ab27-09a5abb41c2d",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC004-test_create_new_campaign_endpoint",
    "description": "Verify that the POST /marketing/campaigns endpoint successfully creates a new marketing campaign and returns a 201 status code with confirmation.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\n    \"Content-Type\": \"application/json\",\n    # Add Authorization header here if authentication is required, e.g.:\n    # \"Authorization\": \"Bearer <token>\"\n}\n\ndef test_create_new_campaign_endpoint():\n    campaign_url = f\"{BASE_URL}/marketing/campaigns\"\n    # Sample payload for creating a new marketing campaign\n    payload = {\n        \"name\": f\"Test Campaign {uuid.uuid4()}\",\n        \"description\": \"This is a test campaign created during automated testing.\",\n        \"start_date\": \"2025-10-01\",\n        \"end_date\": \"2025-12-31\",\n        \"budget\": 10000.00,\n        \"status\": \"planned\",\n        \"channels\": [\"email\", \"social_media\"]\n    }\n\n    created_campaign_id = None\n\n    try:\n        response = requests.post(campaign_url, json=payload, headers=HEADERS, timeout=TIMEOUT)\n        # Assert status code\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n        \n        # Assert response content-type\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in content_type.lower(), f\"Expected JSON response, got {content_type}\"\n        \n        response_json = response.json()\n        \n        # Validate that response includes confirmation fields\n        assert \"id\" in response_json, \"Response JSON must contain 'id' field for the created campaign\"\n        assert response_json.get(\"name\") == payload[\"name\"], \"Campaign name in response does not match payload\"\n        \n        created_campaign_id = response_json[\"id\"]\n\n    finally:\n        # Clean up: delete the created campaign if created_campaign_id is set\n        if created_campaign_id:\n            delete_url = f\"{campaign_url}/{created_campaign_id}\"\n            try:\n                del_response = requests.delete(delete_url, headers=HEADERS, timeout=TIMEOUT)\n                # Acceptable to delete 200 or 204; silently ignore failure to not mask the test result\n                if del_response.status_code not in (200, 204):\n                    print(f\"Warning: Failed to delete campaign id {created_campaign_id}, status code {del_response.status_code}\")\n            except Exception as e:\n                print(f\"Warning: Exception during cleanup deleting campaign id {created_campaign_id}: {e}\")\n\ntest_create_new_campaign_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 56, in <module>\n  File \"<string>\", line 28, in test_create_new_campaign_endpoint\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.293Z",
    "modified": "2025-09-23T20:35:43.053Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "7760630b-a6db-43be-b041-16e62e55bdb7",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC005-test_list_all_support_tickets_endpoint",
    "description": "Verify that the GET /support/tickets endpoint returns a list of all support tickets with a 200 status code and correct data structure.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_list_all_support_tickets_endpoint():\n    url = f\"{BASE_URL}/support/tickets\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not a valid JSON\"\n\n    # Validate that data is a list\n    assert isinstance(data, list), f\"Expected response data to be a list, got {type(data)}\"\n\n    # Validate data structure: each item should be a dict with at least expected keys\n    # Since schema not detailed, check for typical support ticket fields existence if any\n    # Common fields might be: id, subject, status, created_at, but we can't assume,\n    # so we will check that each item is a dict.\n    for item in data:\n        assert isinstance(item, dict), f\"Expected each ticket to be a dict, got {type(item)}\"\n        # Optionally check minimal keys if known:\n        # assert \"id\" in item, \"Ticket missing 'id' field\"\n        # assert \"subject\" in item, \"Ticket missing 'subject' field\"\n        # If no fields known, skip.\n\ntest_list_all_support_tickets_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_list_all_support_tickets_endpoint\n  File \"/var/task/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 37, in <module>\n  File \"<string>\", line 14, in test_list_all_support_tickets_endpoint\nAssertionError: HTTP request failed: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.298Z",
    "modified": "2025-09-23T20:35:43.068Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "a71213d3-b9a6-4a1c-bd25-c8d9a8ce3175",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC006-test_create_new_support_ticket_endpoint",
    "description": "Verify that the POST /support/tickets endpoint successfully creates a new support ticket and returns a 201 status code with confirmation.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_create_new_support_ticket_endpoint():\n    url = f\"{BASE_URL}/support/tickets\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Example payload for a support ticket creation based on typical support ticket fields\n    payload = {\n        \"title\": \"Test Ticket Creation\",\n        \"description\": \"This is a test ticket created during automated testing.\",\n        \"priority\": \"normal\",  # typically low, normal, high or urgent\n        \"status\": \"open\"       # initial status\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Check confirmation fields in response (e.g. id or message)\n    assert \"id\" in data or \"ticket_id\" in data or \"message\" in data, \"Response JSON missing confirmation content\"\n\ntest_create_new_support_ticket_endpoint()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_create_new_support_ticket_endpoint\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 22, in test_create_new_support_ticket_endpoint\nAssertionError: Request failed: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.303Z",
    "modified": "2025-09-23T20:39:43.363Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "8614d86c-a8c5-487a-a8b1-76d585ecb9fc",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC007-test_list_all_organizations_endpoint",
    "description": "Verify that the GET /api/superadmin/organizations endpoint returns a list of all organizations with a 200 status code and correct data structure.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_list_all_organizations_endpoint():\n    url = f\"{BASE_URL}/api/superadmin/organizations\"\n    headers = {\n        \"Accept\": \"application/json\",\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response content is not valid JSON\"\n\n    # Assert that data is a list\n    assert isinstance(data, list), f\"Expected response to be a list, got {type(data)}\"\n\n    # If list not empty, check structure of first element\n    if data:\n        org = data[0]\n        assert isinstance(org, dict), f\"Expected each organization to be a dict, got {type(org)}\"\n        # Minimal expected keys (guessed typical organization fields)\n        expected_keys = {\"id\", \"name\", \"created_at\", \"updated_at\"}\n        org_keys = set(org.keys())\n        missing_keys = expected_keys - org_keys\n        assert not missing_keys, f\"Organization dict missing keys: {missing_keys}\"\n\ntest_list_all_organizations_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_list_all_organizations_endpoint\n  File \"/var/task/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 37, in <module>\n  File \"<string>\", line 15, in test_list_all_organizations_endpoint\nAssertionError: Request to http://localhost:8000/api/superadmin/organizations failed: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.309Z",
    "modified": "2025-09-23T20:38:13.240Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "d8b195cf-74c4-4b17-85a8-2ac27055d592",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC008-test_create_new_organization_endpoint",
    "description": "Verify that the POST /api/superadmin/organizations endpoint successfully creates a new organization and returns a 201 status code with confirmation.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_create_new_organization_endpoint():\n    url = f\"{BASE_URL}/api/superadmin/organizations\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Unique organization name to prevent conflicts\n    org_name = f\"TestOrg-{uuid.uuid4()}\"\n    payload = {\n        \"name\": org_name,\n        \"description\": \"Organization created during automated test TC008\",\n        \"address\": \"123 Test St, Test City, TS\",\n        \"email\": f\"contact@{org_name.lower()}.com\",\n        \"phone\": \"+1234567890\"\n    }\n\n    created_org_id = None\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n        response_json = response.json()\n        # Confirm confirmation markers in response: typically the created resource or message\n        assert \"id\" in response_json, \"Response JSON does not contain 'id'\"\n        created_org_id = response_json[\"id\"]\n        assert isinstance(created_org_id, int) or isinstance(created_org_id, str), \"Organization ID is not valid\"\n        # Optionally check name matches\n        assert response_json.get(\"name\") == org_name, \"Organization name in response does not match payload\"\n\n    finally:\n        # Cleanup: delete the created organization if creation succeeded\n        if created_org_id:\n            try:\n                delete_url = f\"{url}/{created_org_id}\"\n                del_response = requests.delete(delete_url, headers=headers, timeout=TIMEOUT)\n                # Accept 200 or 204 as successful deletion\n                assert del_response.status_code in (200, 204), f\"Cleanup failed, deletion status code: {del_response.status_code}\"\n            except Exception as e:\n                # Log cleanup failure, do not raise to hide original test results\n                print(f\"Cleanup error for organization id {created_org_id}: {e}\")\n\ntest_create_new_organization_endpoint()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 47, in <module>\n  File \"<string>\", line 25, in test_create_new_organization_endpoint\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.315Z",
    "modified": "2025-09-23T20:40:24.187Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "6512aeb5-f691-412a-ab2b-c42bee17712f",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC009-test_user_login_endpoint",
    "description": "Verify that the POST /auth/login endpoint authenticates users with valid credentials and returns a 200 status code and token, and rejects invalid credentials with a 401 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_user_login_endpoint():\n    url = f\"{BASE_URL}/auth/login\"\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Valid credentials (these should be replaced with actual valid test credentials)\n    valid_credentials = {\n        \"username\": \"testuser\",\n        \"password\": \"TestPassword123!\"\n    }\n\n    # Invalid credentials\n    invalid_credentials = {\n        \"username\": \"testuser\",\n        \"password\": \"WrongPassword!\"\n    }\n\n    # Test login with valid credentials\n    try:\n        response = requests.post(url, json=valid_credentials, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed for valid credentials: {e}\"\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code} for valid credentials\"\n    try:\n        json_data = response.json()\n    except ValueError:\n        assert False, \"Response body is not valid JSON for valid credentials login\"\n    assert \"token\" in json_data and isinstance(json_data[\"token\"], str) and len(json_data[\"token\"]) > 0, \"Token not found or invalid in response for valid credentials\"\n\n    # Test login with invalid credentials\n    try:\n        response = requests.post(url, json=invalid_credentials, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed for invalid credentials: {e}\"\n    assert response.status_code == 401, f\"Expected status code 401 but got {response.status_code} for invalid credentials\"\n\ntest_user_login_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 24, in test_user_login_endpoint\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 41, in <module>\n  File \"<string>\", line 26, in test_user_login_endpoint\nAssertionError: Request failed for valid credentials: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.320Z",
    "modified": "2025-09-23T20:39:43.373Z"
  },
  {
    "projectId": "819f2d68-adaf-423d-a749-69448f3dedfb",
    "testId": "2affa12a-7481-447a-bb7f-ec0e2c372703",
    "userId": "5468b428-b001-7011-111e-29056290cea4",
    "title": "TC010-test_user_logout_endpoint",
    "description": "Verify that the POST /auth/logout endpoint successfully logs out the user and returns a 200 status code confirming logout.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nLOGIN_ENDPOINT = f\"{BASE_URL}/auth/login\"\nLOGOUT_ENDPOINT = f\"{BASE_URL}/auth/logout\"\nTIMEOUT = 30\n\ndef test_user_logout_endpoint():\n    # Sample valid user credentials for login (assumed for test)\n    login_payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Authenticate user to obtain token for logout\n    try:\n        login_response = requests.post(LOGIN_ENDPOINT, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_response.status_code == 200, f\"Login failed with status code {login_response.status_code}\"\n        token = login_response.json().get(\"access_token\")\n        assert token, \"Login response missing access_token\"\n\n        # Logout using the token in Authorization header\n        logout_headers = {\n            \"Authorization\": f\"Bearer {token}\"\n        }\n        logout_response = requests.post(LOGOUT_ENDPOINT, headers=logout_headers, timeout=TIMEOUT)\n\n        # Assert logout success\n        assert logout_response.status_code == 200, f\"Logout failed with status code {logout_response.status_code}\"\n        logout_json = logout_response.json() if logout_response.content else {}\n        # Optional: check message or confirmation in logout_json if present\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_user_logout_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nTimeoutError: timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/var/task/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 18, in test_user_logout_endpoint\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 34, in test_user_logout_endpoint\nAssertionError: Request failed: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Read timed out. (read timeout=30)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-23T20:31:59.326Z",
    "modified": "2025-09-23T20:39:43.364Z"
  }
]
