from typing import List, Optional, TYPE_CHECKING
from sqlalchemy.orm import Session
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
from fastapi import HTTPException, status as fastapi_status
from app.core.crud.base import CRUDBase
from app.models.sales import Report

# Use TYPE_CHECKING to avoid circular imports
if TYPE_CHECKING:
    from app.sales.report.models import ReportCreate, ReportUpdate

class CRUDReport(CRUDBase[Report, 'ReportCreate', 'ReportUpdate']):
    def get_by_type(self, db: Session, *, report_type: str) -> List[Report]:
        try:
            stmt = select(Report).where(Report.report_type == report_type)
            result = db.execute(stmt)
            return list(result.scalars().all())
        except SQLAlchemyError as e:
            raise HTTPException(
                status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Database error while fetching reports by type: {str(e)}"
            )

    def get_by_status(self, db: Session, *, status: str) -> List[Report]:
        try:
            stmt = select(Report).where(Report.status == status)
            result = db.execute(stmt)
            return list(result.scalars().all())
        except SQLAlchemyError as e:
            raise HTTPException(
                status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Database error while fetching reports by status: {str(e)}"
            )

    def get_by_generated_by(self, db: Session, *, generated_by: str) -> List[Report]:
        try:
            stmt = select(Report).where(Report.generated_by == generated_by)
            result = db.execute(stmt)
            return list(result.scalars().all())
        except SQLAlchemyError as e:
            raise HTTPException(
                status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Database error while fetching reports by generated by: {str(e)}"
            )

report = CRUDReport(Report)